; Group 11 Wednesday
;-------------------------------------------------------------------------------
; MSP430 Assembler Code Template for use with TI Code Composer Studio
;
;
;-------------------------------------------------------------------------------
            .cdecls C,LIST,"msp430.h"       ; Include device header file
            
;-------------------------------------------------------------------------------
            .def    RESET                   ; Export program entry-point to
                                            ; make it known to linker.
;-------------------------------------------------------------------------------
            .text                           ; Assemble into program memory.
            .retain                         ; Override ELF conditional linking
                                            ; and retain current section.
            .retainrefs                     ; And retain any sections that have
                                            ; references to current section.

;-------------------------------------------------------------------------------
RESET       mov.w   #__STACK_END,SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop watchdog timer
			mov.w	#0d, P2SEL


;-------------------------------------------------------------------------------
; Main loop here
;-------------------------------------------------------------------------------

Mainloop 	mov.w 	#0Fh, R7
			mov.w	#03h, R8
			mov.w	#00h, R9

			push.w	R7
			push.w	R8
			push.w	R9
add_		call 	#Add
			pop     R9
			pop		R8
			pop		R7

			push.w	R7
			push.w	R8
			push.w	R9
sub_		call 	#Sub
			pop     R9
			pop		R8
			pop		R7

			push.w	R7
			push.w	R8
			push.w	R9
mult_		call	#Multiply
			pop     R9
			pop		R8
			pop		R7

			push.w	R7
			push.w	R8
			push.w	R9
div_		call 	#Divide
			pop     R9
			pop		R8
			pop		R7

 			jmp 	EXIT


;----------------------------------------------------------------------------
;	Subroutines
;----------------------------------------------------------------------------
Add			mov.w 	6(SP), R4
			mov.w	4(SP), R5
			add.w	R4, R5
			mov.w	R5, 2(SP)
			ret

Sub 		mov.w 	6(SP), R4
			mov.w	4(SP), R5
			sub.w	R5, R4
			mov.w	R4, 2(SP)
			ret

Multiply	mov.w 	6(SP), R4
			mov.w	4(SP), R2
			mov.w	#00h, R6

multStep	push.w	R4
			push.w	R6
			push.w	R6
			call	#Add
			pop.w	R6
			pop.w	R3
			pop.w	R4
			dec.w	R2
			jz		exitMult
			jmp		multStep
exitMult	mov.w	R6, 2(SP)
			ret

Divide		mov.w 	6(SP), R4
			mov.w	4(SP), R5
			mov.w	#00h, R6
divStep		cmp.w	R5, R4
			jn		exitDiv
			push.w	R4
			push.w 	R5
			push.w	R6
			call	#Sub
			pop		R4
			pop		R5
			pop 	R3
			inc.w	R6
			jmp 	divStep
exitDiv		mov.w	R6, 2(SP)
			ret

EXIT		jmp EXIT

;-------------------------------------------------------------------------------
; Stack Pointer definition
;-------------------------------------------------------------------------------
           .global __STACK_END
           .sect   .stack
            
;-------------------------------------------------------------------------------
; Interrupt Vectors
;-------------------------------------------------------------------------------
            .sect   ".reset"                ; MSP430 RESET Vector
            .short  RESET
            
